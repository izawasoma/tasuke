#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tasuke:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * ゲーム関連の動作を担うソースコード
 */

//ソケットの準備
const io = require("socket.io")(server);
//データベースのクライアント情報
const { Client } = require('pg');

//オブジェクト
const GameData = require('../model/GameData');
const RoomInfo = require('../model/RoomInfo');

//ゲームに必要なデータ
const gameData = new GameData();

io.on("connection", (socket) => {
  //=============================
  //管理者ログイン
  //=============================
  socket.on("adminLogin",async function(data){

    //DBクライアント
    const client = new Client({
      user: 'yzkgynjeuyrdts',
      host: 'ec2-54-160-109-68.compute-1.amazonaws.com',
      database: 'd54n1qq9id49kn',
      password: 'ae2caf0bbc24c575f67d08ba0427143e7c8c4b051f27809e0696ab8ddf7c41d1',
      port: '5432',
      ssl: {
        rejectUnauthorized: false
      }
    });
    //接続
    await client.connect((err) => {
      if (err) {
        console.error('connection error', err.stack);
      } else {
        console.log('connected to postgres');
      }
    });

    //データ取得
    let adminUser;

    await client.query('SELECT * from admins')
    .then((result) => {
      adminUser = result.rows[0];
      client.end();
    })
    .catch((e) => {
      console.error(e.stack);
    });

    //ログインチェック
    if(adminUser.loginId == data.id && adminUser.password == data.password){
      socket.emit("adminLoginSuccess");
    }
    else{
      socket.emit("adminLoginFail");
    }

  })
  //=============================
  //管理者がメンバー数を登録した時
  //=============================
  socket.on("settingMemberNumber",function(socketData){
    //新たにroomInfoを作成
    const roomInfo = new RoomInfo(socketData.memberNum);
    //作成したroomInfoをgameDataに追加
    gameData.addRoomInfo(roomInfo);
    //作成したroomInfoを返却する
    socket.emit("settingedMemberNumber",roomInfo);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
